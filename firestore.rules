rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Function to check if user is platform admin
    function isPlatformAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role.type == 'admin';
    }
    
    // Function to check if user is platform viewer
    function isPlatformViewer() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role.type == 'viewer';
    }
    
    // Function to check if user has platform access (admin or viewer)
    function hasPlatformAccess() {
      return isPlatformAdmin() || isPlatformViewer();
    }
    
    // Function to check if user is master admin
    function isMasterAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role.type == 'admin' &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.metadata.isInitialAdmin == true;
    }
    
    // Function to check if target user is admin
    function isTargetAdmin(targetUserId) {
      return exists(/databases/$(database)/documents/users/$(targetUserId)) &&
             get(/databases/$(database)/documents/users/$(targetUserId)).data.role.type == 'admin';
    }
    
    // Function to check if target user is master admin
    function isTargetMasterAdmin(targetUserId) {
      return exists(/databases/$(database)/documents/users/$(targetUserId)) &&
             get(/databases/$(database)/documents/users/$(targetUserId)).data.role.type == 'admin' &&
             get(/databases/$(database)/documents/users/$(targetUserId)).data.metadata.isInitialAdmin == true;
    }
    
    // Function to check if user is authorized for a specific business
    function isCompanyAuthorized(businessId) {
      return request.auth != null && 
             exists(/databases/$(database)/documents/businesses/$(businessId)) &&
             request.auth.uid in get(/databases/$(database)/documents/businesses/$(businessId)).data.authorizedUsers;
    }
    
    // Platform users collection rules (for admin and viewer roles)
    match /users/{userId} {
      // Allow users to read and write their own user document
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Allow admin users to read all users
      allow read: if isPlatformAdmin();
      
      // Allow admin users to create new users
      allow create: if isPlatformAdmin() && request.resource.data.role.type != 'admin';
      
      // Allow master admin users to create other admin users
      allow create: if isMasterAdmin() && request.resource.data.role.type == 'admin' &&
                       !('isInitialAdmin' in request.resource.data.metadata && request.resource.data.metadata.isInitialAdmin == true);
      
      // Allow platform admin to update any user except master admins (initial admins)
      // Simplified check to avoid permission errors
      allow update: if isPlatformAdmin() && userId != request.auth.uid;
      
      // Allow platform admin to update master admins only if they are also master admin
      allow update: if isMasterAdmin();
      
      // Allow platform admin to delete any user except master admins (initial admins)
      allow delete: if isPlatformAdmin() && 
        exists(/databases/$(database)/documents/users/$(userId)) &&
        !(get(/databases/$(database)/documents/users/$(userId)).data.metadata.isInitialAdmin == true);
      
      // Allow unauthenticated queries to check if admin users exist (for initial setup)
      allow read: if resource.data.role.type == 'admin';
      
      // Allow creation of initial admin user (when no admins exist)
      allow create: if request.auth != null && 
        request.resource.data.role.type == 'admin' && 
        !exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    // Businesses collection rules
    match /businesses/{businessId} {
      // Platform admins can read and write all businesses
      allow read, write: if isPlatformAdmin();
      
      // Platform viewers can read all businesses
      allow read: if isPlatformViewer();
      
      // Platform admins can create businesses
      allow create: if isPlatformAdmin();
      
      // Company users can read and write their own business
      allow read, write: if isCompanyAuthorized(businessId);
      
      // Company users subcollection
      match /users/{userId} {
        // Platform admins can manage all company users
        allow read, write: if isPlatformAdmin();
        
        // Company admins and managers can read all users in their company
        allow read: if isCompanyAuthorized(businessId);
        
        // Company admins can create and manage company users
        allow create, update, delete: if isPlatformAdmin() || 
          (isCompanyAuthorized(businessId) && 
           get(/databases/$(database)/documents/businesses/$(businessId)/users/$(request.auth.uid)).data.role.type in ['company_admin']);
        
        // Users can read and update their own data
        allow read, update: if request.auth != null && request.auth.uid == userId;
      }
      
      // Other business sub-collections (products, recipes, etc.)
      match /{document=**} {
        // Platform admins have full access
        allow read, write: if isPlatformAdmin();
        
        // Company users have access to their business data
        allow read, write: if isCompanyAuthorized(businessId);
      }
    }
  }
}